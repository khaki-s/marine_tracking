import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import pearsonr,spearmanr
from datetime import timedelta, time
import numpy as np

#------Load data------
# Load shrimp movement data
shrimp = pd.read_excel("D:/文献学习/保研/全国大学生生命科学竞赛/绘图和数据处理/最后/2020-2021.xlsx", parse_dates=['time'])
shrimp.rename(columns={
    'time': 'datetime',
    'distance/mm/per_crab': 'distance_mm'
}, inplace=True)
#Keep only useful columns and remove null values
shrimp = shrimp[['datetime', 'distance_mm']].dropna()

# Load tide data
tide = pd.read_csv('D:/khaki/ultralytics-8.3.27/shrimp/tide/2020-2021tide.csv')
#Merge the day and time columns and resolve to datetime
tide['datetime'] = pd.to_datetime(
    tide['day'] + ' ' + tide['time'],
    format='%d-%b-%y %H:%M:%S'#%d recognizes English abbreviation
)
tide.rename(columns={'tidal_range': 'height_mm'}, inplace=True)
tide = tide[['datetime', 'height_mm']].dropna()
tide.sort_values('datetime', inplace=True)

# Create date columns
tide['date']   = tide['datetime'].dt.date

# Compute daily tide amplitude (max - min)
tide_amp = (
    tide
    .groupby('date', as_index=False)['height_mm']#Group the date column and only operate on the data in the height mm column
    .agg(['min','max'])#Take the maximum and minimum values of the grouped height mm operation
    .reset_index()#Restore the index to a regular column
)
tide_amp['tide_amp'] = tide_amp['max'] - tide_amp['min']
tide_amp = tide_amp[['date', 'tide_amp']]

# Extract daily tide level at 23:59:59
tide_level = tide[tide['datetime'].dt.time == time(23, 59, 59)]
tide_level = tide_level[['date', 'height_mm']].rename(columns={'height_mm': 'tide_level'})

# Align shrimp observations to tide dates
def get_tide_date(dt):
    # if shrimp time is between 00:00 and 00:59, use previous day's tide
    if dt.time() < time(1,0):
        return (dt.date() - timedelta(days=1))
    else:
        return dt.date()
# shrimp['datetime'] = pd.to_datetime(shrimp['datetime'], infer_datetime_format=True)
shrimp['tide_date'] = shrimp['datetime'].apply(get_tide_date)

# Merge into one DataFrame, keep date for plotting
df = (
    shrimp[['tide_date', 'distance_mm']]
    .merge(tide_amp,   left_on='tide_date', right_on='date')
    .merge(tide_level, left_on='tide_date', right_on='date')
)

df.rename(columns={'tide_date': 'date'}, inplace=True)
# Keep only necessary columns
df = df[['date', 'distance_mm', 'tide_amp', 'tide_level']]



#------Calculate correlation coefficient------
# 1. Calculate Pearson correlation
r_amp,   p_amp   = pearsonr(df['distance_mm'], df['tide_amp'])
r_level, p_level = pearsonr(df['distance_mm'], df['tide_level'])

print(f"Pearsonr Shrimp vs Tide Amp:   r = {r_amp:.2f}, p = {p_amp:.3f}")
print(f"Pearsonr Shrimp vs Tide Level: r = {r_level:.2f}, p = {p_level:.3f}")

# 2. Calculate Spearman correlation
# Use sliding window median filtering (window=3 days, center aligned)
window = 3
df['dist_med']  = df['distance_mm'].rolling(window=window, center=True).median()
df['amp_med']   = df['tide_amp'].rolling(window=window, center=True).median()
df['level_med'] = df['tide_level'].rolling(window=window, center=True).median()

# Discard NaN generated by edge effects
df_smooth = df.dropna(subset=['dist_med','amp_med','level_med'])

# Calculate Spearman correlation
rho_amp,   p_amp_s   = spearmanr(df_smooth['dist_med'],  df_smooth['amp_med'])
rho_level, p_level_s = spearmanr(df_smooth['dist_med'],  df_smooth['level_med'])

print(f"Spearman Shrimp vs Tide Amp:   rho = {rho_amp:.2f}, p = {p_amp_s:.3f}")
print(f"Spearman Shrimp vs Tide Level: rho = {rho_level:.2f}, p = {p_level_s:.3f}")



#------Draw------
# 1.Draw Pearson correlation
def plot_with_fit(x, y, xlabel, ylabel, title,p):
    plt.scatter(x, y, s=30, alpha=0.7)
    # Linear Fit
    m, b = np.polyfit(x, y, 1)
    xs = np.array([x.min(), x.max()])
    ys = m * xs + b
    plt.plot(xs, ys, linestyle='--')
    # Annotate the fitting equation and r value
    plt.text(0.05, 0.95,
            f'y = {m:.2f}x + {b:.2f}\n$r$ = {np.corrcoef(x,y)[0,1]:.2f}',
            #plt.gca():Get coordinate axis instance like ax 
            transform=plt.gca().transAxes,
            va='top')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(f"{title}(p={p:.3f})")
    plt.tight_layout()

plt.figure()
plot_with_fit(df['distance_mm'], df['tide_amp'],
            'Shrimp distance (mm)', 'Tide amplitude (mm)',
            'Pearson:Shrimp vs Tide Amp',p_amp)

plt.figure()
plot_with_fit(df['distance_mm'], df['tide_level'],
            'Shrimp distance (mm)', 'Tide level at 23:59:59 (mm)',
            'Pearson:Shrimp vs Tide Level',p_level)

plt.show()


# 2. Draw Spearman correlation
def plot_with_fit(x, y, xlabel, ylabel, title,p):
    plt.scatter(x, y, s=30, alpha=0.7)
    # Linear Fit
    m, b = np.polyfit(x, y, 1)
    xs = np.array([x.min(), x.max()])
    ys = m * xs + b
    plt.plot(xs, ys, linestyle='--')
    plt.text(0.05, 0.95,
            f'y = {m:.2f}x + {b:.2f}\n$\\rho$ = {spearmanr(x,y)[0]:.2f}',
            transform=plt.gca().transAxes,
            va='top')
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(f"{title}(p={p:.3f})")
    plt.tight_layout()

plt.figure()
plot_with_fit(df_smooth['dist_med'], df_smooth['amp_med'],
            'Shrimp distance (mm)', 'Tide amplitude (mm)',
            'Spearman: Shrimp vs Tide Amp',p_amp_s)

plt.figure()
plot_with_fit(df_smooth['dist_med'], df_smooth['level_med'],
            'Shrimp distance (mm)', 'Tide level (mm)',
            'Spearman: Shrimp vs Tide Level',p_level_s)

plt.show()



